// Code generated by github.com/ipld/go-ipld-prime/schema/gen/graphql/server, DO NOT EDIT.

package graphql

import (
	"context"
	"fmt"

	"github.com/graphql-go/graphql"
	"github.com/graphql-go/graphql/language/ast"
	ipld "github.com/ipld/go-ipld-prime"
	cidlink "github.com/ipld/go-ipld-prime/linking/cid"
	"github.com/storyloc/server/pkg/schema"
)

type nodeLoader func(ctx context.Context, cid cidlink.Link, builder ipld.NodeBuilder) (ipld.Node, error)

const nodeLoaderCtxKey = "NodeLoader"

var errNotNode = fmt.Errorf("Not IPLD Node")
var errInvalidLoader = fmt.Errorf("Invalid Loader Provided")
var errInvalidLink = fmt.Errorf("Invalid link")
var errUnexpectedType = "Unexpected type %T. expected %s"

func resolve_map_at(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(ipld.Node)
	if !ok {
		return nil, errNotNode
	}
	arg := p.Args["key"]

	switch ta := arg.(type) {
	case ipld.Node:
		return ts.LookupByNode(ta)
	case string:
		return ts.LookupByString(ta)
	default:
		return nil, fmt.Errorf("unknown key type: %T", arg)
	}
}

var Activity__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Activity",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})

func Audio__Data__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Audio)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Audio")
	}

	return ts.FieldData(), nil

}
func Audio__Date__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Audio)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Audio")
	}

	return ts.FieldDate().AsFloat()

}

var Audio__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Audio",
	Fields: graphql.Fields{
		"Data": &graphql.Field{

			Type: graphql.NewNonNull(Bytes__type),

			Resolve: Audio__Data__resolve,
		},
		"Date": &graphql.Field{

			Type: graphql.NewNonNull(graphql.Int),

			Resolve: Audio__Date__resolve,
		},
	},
})
var Audios__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Audios",
	Fields: graphql.Fields{
		"At": &graphql.Field{
			Type: Audio__type,
			Args: graphql.FieldConfigArgument{
				"key": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Audios)
				if !ok {
					return nil, errNotNode
				}

				arg := p.Args["key"]
				var out ipld.Node
				var err error
				switch ta := arg.(type) {
				case ipld.Node:
					out, err = ts.LookupByNode(ta)
				case int64:
					out, err = ts.LookupByIndex(ta)
				default:
					return nil, fmt.Errorf("unknown key type: %T", arg)
				}

				return out, err

			},
		},
		"All": &graphql.Field{
			Type: graphql.NewList(Audio__type),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Audios)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)
				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Range": &graphql.Field{
			Type: graphql.NewList(Audio__type),
			Args: graphql.FieldConfigArgument{
				"skip": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"take": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Audios)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)

				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Count": &graphql.Field{
			Type: graphql.NewNonNull(graphql.Int),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Audios)
				if !ok {
					return nil, errNotNode
				}
				return ts.Length(), nil
			},
		},
	},
})

func Bytes__type__serialize(value interface{}) interface{} {
	switch value := value.(type) {
	case ipld.Node:

		b, err := value.AsBytes()
		if err != nil {
			return err
		}
		return b

	default:
		return nil
	}
}
func Bytes__type__parse(value interface{}) interface{} {
	builder := schema.Type.Bytes__Repr.NewBuilder()
	switch v2 := value.(type) {
	case string:
		builder.AssignString(v2)
	case *string:
		builder.AssignString(*v2)
	default:
		return nil
	}
	return builder.Build()
}
func Bytes__type__parseLiteral(valueAST ast.Value) interface{} {
	builder := schema.Type.Bytes__Repr.NewBuilder()
	switch valueAST := valueAST.(type) {
	case *ast.StringValue:
		builder.AssignString(valueAST.Value)
	default:
		return nil
	}
	return builder.Build()
}

var Bytes__type = graphql.NewScalar(graphql.ScalarConfig{
	Name:         "Bytes",
	Description:  "Bytes",
	Serialize:    Bytes__type__serialize,
	ParseValue:   Bytes__type__parse,
	ParseLiteral: Bytes__type__parseLiteral,
})
var Chat__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Chat",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})
var Communities__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Communities",
	Fields: graphql.Fields{
		"At": &graphql.Field{
			Type: Community__type,
			Args: graphql.FieldConfigArgument{
				"key": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Communities)
				if !ok {
					return nil, errNotNode
				}

				arg := p.Args["key"]
				var out ipld.Node
				var err error
				switch ta := arg.(type) {
				case ipld.Node:
					out, err = ts.LookupByNode(ta)
				case int64:
					out, err = ts.LookupByIndex(ta)
				default:
					return nil, fmt.Errorf("unknown key type: %T", arg)
				}

				return out, err

			},
		},
		"All": &graphql.Field{
			Type: graphql.NewList(Community__type),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Communities)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)
				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Range": &graphql.Field{
			Type: graphql.NewList(Community__type),
			Args: graphql.FieldConfigArgument{
				"skip": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"take": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Communities)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)

				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Count": &graphql.Field{
			Type: graphql.NewNonNull(graphql.Int),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Communities)
				if !ok {
					return nil, errNotNode
				}
				return ts.Length(), nil
			},
		},
	},
})

func Community__Name__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Community)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Community")
	}

	return ts.FieldName().AsString()

}
func Community__Members__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Community)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Community")
	}

	f := ts.FieldMembers()
	if f.Exists() {

		return f.Must(), nil

	} else {
		return nil, nil
	}

}
func Community__Tags__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Community)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Community")
	}

	f := ts.FieldTags()
	if f.Exists() {

		return f.Must(), nil

	} else {
		return nil, nil
	}

}

var Community__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Community",
	Fields: graphql.Fields{
		"Name": &graphql.Field{

			Type: graphql.NewNonNull(graphql.String),

			Resolve: Community__Name__resolve,
		},
		"Members": &graphql.Field{

			Type: Profiles__type,

			Resolve: Community__Members__resolve,
		},
		"Tags": &graphql.Field{

			Type: Tags__type,

			Resolve: Community__Tags__resolve,
		},
	},
})
var Company__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Company",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})
var Connection__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Connection",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})

func Content__Task__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Content)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Content")
	}

	return ts.FieldTask(), nil

}
func Content__Decision__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Content)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Content")
	}

	return ts.FieldDecision(), nil

}
func Content__Page__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Content)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Content")
	}

	return ts.FieldPage(), nil

}
func Content__Chat__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Content)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Content")
	}

	return ts.FieldChat(), nil

}
func Content__Event__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Content)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Content")
	}

	return ts.FieldEvent(), nil

}
func Content__Activity__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Content)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Content")
	}

	return ts.FieldActivity(), nil

}
func Content__Story__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Content)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Content")
	}

	return ts.FieldStory(), nil

}
func Content__StoryCollection__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Content)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Content")
	}

	return ts.FieldStoryCollection(), nil

}

var Content__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Content",
	Fields: graphql.Fields{
		"Task": &graphql.Field{

			Type: graphql.NewNonNull(Task__type),

			Resolve: Content__Task__resolve,
		},
		"Decision": &graphql.Field{

			Type: graphql.NewNonNull(Decision__type),

			Resolve: Content__Decision__resolve,
		},
		"Page": &graphql.Field{

			Type: graphql.NewNonNull(Page__type),

			Resolve: Content__Page__resolve,
		},
		"Chat": &graphql.Field{

			Type: graphql.NewNonNull(Chat__type),

			Resolve: Content__Chat__resolve,
		},
		"Event": &graphql.Field{

			Type: graphql.NewNonNull(Event__type),

			Resolve: Content__Event__resolve,
		},
		"Activity": &graphql.Field{

			Type: graphql.NewNonNull(Activity__type),

			Resolve: Content__Activity__resolve,
		},
		"Story": &graphql.Field{

			Type: graphql.NewNonNull(Story__type),

			Resolve: Content__Story__resolve,
		},
		"StoryCollection": &graphql.Field{

			Type: graphql.NewNonNull(StoryCollection__type),

			Resolve: Content__StoryCollection__resolve,
		},
	},
})
var DAO__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "DAO",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})
var Decision__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Decision",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})
var Event__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Event",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})

func GeoPosition__Longitude__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.GeoPosition)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.GeoPosition")
	}

	return ts.FieldLongitude().AsFloat()

}
func GeoPosition__Latitude__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.GeoPosition)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.GeoPosition")
	}

	return ts.FieldLatitude().AsFloat()

}

var GeoPosition__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "GeoPosition",
	Fields: graphql.Fields{
		"Longitude": &graphql.Field{

			Type: graphql.NewNonNull(graphql.Float),

			Resolve: GeoPosition__Longitude__resolve,
		},
		"Latitude": &graphql.Field{

			Type: graphql.NewNonNull(graphql.Float),

			Resolve: GeoPosition__Latitude__resolve,
		},
	},
})
var Group__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Group",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})

func Image__Data__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Image)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Image")
	}

	return ts.FieldData(), nil

}
func Image__Size__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Image)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Image")
	}

	return ts.FieldSize().AsFloat()

}

var Image__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Image",
	Fields: graphql.Fields{
		"Data": &graphql.Field{

			Type: graphql.NewNonNull(Bytes__type),

			Resolve: Image__Data__resolve,
		},
		"Size": &graphql.Field{

			Type: graphql.NewNonNull(graphql.Int),

			Resolve: Image__Size__resolve,
		},
	},
})

func Interest__Tag__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Interest)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Interest")
	}

	return ts.FieldTag(), nil

}
func Interest__Experience__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Interest)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Interest")
	}

	return ts.FieldExperience().AsFloat()

}

var Interest__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Interest",
	Fields: graphql.Fields{
		"Tag": &graphql.Field{

			Type: graphql.NewNonNull(Tag__type),

			Resolve: Interest__Tag__resolve,
		},
		"Experience": &graphql.Field{

			Type: graphql.NewNonNull(graphql.Int),

			Resolve: Interest__Experience__resolve,
		},
	},
})
var Interests__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Interests",
	Fields: graphql.Fields{
		"At": &graphql.Field{
			Type: Interest__type,
			Args: graphql.FieldConfigArgument{
				"key": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Interests)
				if !ok {
					return nil, errNotNode
				}

				arg := p.Args["key"]
				var out ipld.Node
				var err error
				switch ta := arg.(type) {
				case ipld.Node:
					out, err = ts.LookupByNode(ta)
				case int64:
					out, err = ts.LookupByIndex(ta)
				default:
					return nil, fmt.Errorf("unknown key type: %T", arg)
				}

				return out, err

			},
		},
		"All": &graphql.Field{
			Type: graphql.NewList(Interest__type),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Interests)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)
				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Range": &graphql.Field{
			Type: graphql.NewList(Interest__type),
			Args: graphql.FieldConfigArgument{
				"skip": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"take": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Interests)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)

				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Count": &graphql.Field{
			Type: graphql.NewNonNull(graphql.Int),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Interests)
				if !ok {
					return nil, errNotNode
				}
				return ts.Length(), nil
			},
		},
	},
})

func Location__Name__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Location)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Location")
	}

	return ts.FieldName().AsString()

}

var Location__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Location",
	Fields: graphql.Fields{
		"Name": &graphql.Field{

			Type: graphql.NewNonNull(graphql.String),

			Resolve: Location__Name__resolve,
		},
	},
})

func LocationOfInterest__History__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.LocationOfInterest)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.LocationOfInterest")
	}

	return ts.FieldHistory(), nil

}
func LocationOfInterest__Current__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.LocationOfInterest)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.LocationOfInterest")
	}

	return ts.FieldCurrent(), nil

}
func LocationOfInterest__Planning__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.LocationOfInterest)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.LocationOfInterest")
	}

	return ts.FieldPlanning(), nil

}

var LocationOfInterest__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "LocationOfInterest",
	Fields: graphql.Fields{
		"History": &graphql.Field{

			Type: graphql.NewNonNull(Locations__type),

			Resolve: LocationOfInterest__History__resolve,
		},
		"Current": &graphql.Field{

			Type: graphql.NewNonNull(Location__type),

			Resolve: LocationOfInterest__Current__resolve,
		},
		"Planning": &graphql.Field{

			Type: graphql.NewNonNull(Locations__type),

			Resolve: LocationOfInterest__Planning__resolve,
		},
	},
})
var Locations__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Locations",
	Fields: graphql.Fields{
		"At": &graphql.Field{
			Type: Location__type,
			Args: graphql.FieldConfigArgument{
				"key": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Locations)
				if !ok {
					return nil, errNotNode
				}

				arg := p.Args["key"]
				var out ipld.Node
				var err error
				switch ta := arg.(type) {
				case ipld.Node:
					out, err = ts.LookupByNode(ta)
				case int64:
					out, err = ts.LookupByIndex(ta)
				default:
					return nil, fmt.Errorf("unknown key type: %T", arg)
				}

				return out, err

			},
		},
		"All": &graphql.Field{
			Type: graphql.NewList(Location__type),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Locations)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)
				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Range": &graphql.Field{
			Type: graphql.NewList(Location__type),
			Args: graphql.FieldConfigArgument{
				"skip": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"take": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Locations)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)

				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Count": &graphql.Field{
			Type: graphql.NewNonNull(graphql.Int),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Locations)
				if !ok {
					return nil, errNotNode
				}
				return ts.Length(), nil
			},
		},
	},
})
var LocationsOfInterest__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "LocationsOfInterest",
	Fields: graphql.Fields{
		"At": &graphql.Field{
			Type: LocationOfInterest__type,
			Args: graphql.FieldConfigArgument{
				"key": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.LocationsOfInterest)
				if !ok {
					return nil, errNotNode
				}

				arg := p.Args["key"]
				var out ipld.Node
				var err error
				switch ta := arg.(type) {
				case ipld.Node:
					out, err = ts.LookupByNode(ta)
				case int64:
					out, err = ts.LookupByIndex(ta)
				default:
					return nil, fmt.Errorf("unknown key type: %T", arg)
				}

				return out, err

			},
		},
		"All": &graphql.Field{
			Type: graphql.NewList(LocationOfInterest__type),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.LocationsOfInterest)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)
				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Range": &graphql.Field{
			Type: graphql.NewList(LocationOfInterest__type),
			Args: graphql.FieldConfigArgument{
				"skip": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"take": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.LocationsOfInterest)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)

				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Count": &graphql.Field{
			Type: graphql.NewNonNull(graphql.Int),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.LocationsOfInterest)
				if !ok {
					return nil, errNotNode
				}
				return ts.Length(), nil
			},
		},
	},
})
var Page__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Page",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})

func Profile__Name__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Profile)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Profile")
	}

	return ts.FieldName().AsString()

}
func Profile__Address__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Profile)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Profile")
	}

	return ts.FieldAddress().AsString()

}
func Profile__Image__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Profile)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Profile")
	}

	return ts.FieldImage(), nil

}
func Profile__Locations__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Profile)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Profile")
	}

	return ts.FieldLocations(), nil

}
func Profile__Position__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Profile)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Profile")
	}

	return ts.FieldPosition(), nil

}
func Profile__Interests__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Profile)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Profile")
	}

	return ts.FieldInterests(), nil

}

var Profile__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Profile",
	Fields: graphql.Fields{
		"Name": &graphql.Field{

			Type: graphql.NewNonNull(graphql.String),

			Resolve: Profile__Name__resolve,
		},
		"Address": &graphql.Field{

			Type: graphql.NewNonNull(graphql.String),

			Resolve: Profile__Address__resolve,
		},
		"Image": &graphql.Field{

			Type: graphql.NewNonNull(Image__type),

			Resolve: Profile__Image__resolve,
		},
		"Locations": &graphql.Field{

			Type: graphql.NewNonNull(LocationsOfInterest__type),

			Resolve: Profile__Locations__resolve,
		},
		"Position": &graphql.Field{

			Type: graphql.NewNonNull(GeoPosition__type),

			Resolve: Profile__Position__resolve,
		},
		"Interests": &graphql.Field{

			Type: graphql.NewNonNull(Interests__type),

			Resolve: Profile__Interests__resolve,
		},
	},
})
var Profiles__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Profiles",
	Fields: graphql.Fields{
		"At": &graphql.Field{
			Type: Profile__type,
			Args: graphql.FieldConfigArgument{
				"key": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Profiles)
				if !ok {
					return nil, errNotNode
				}

				arg := p.Args["key"]
				var out ipld.Node
				var err error
				switch ta := arg.(type) {
				case ipld.Node:
					out, err = ts.LookupByNode(ta)
				case int64:
					out, err = ts.LookupByIndex(ta)
				default:
					return nil, fmt.Errorf("unknown key type: %T", arg)
				}

				return out, err

			},
		},
		"All": &graphql.Field{
			Type: graphql.NewList(Profile__type),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Profiles)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)
				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Range": &graphql.Field{
			Type: graphql.NewList(Profile__type),
			Args: graphql.FieldConfigArgument{
				"skip": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"take": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Profiles)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)

				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Count": &graphql.Field{
			Type: graphql.NewNonNull(graphql.Int),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Profiles)
				if !ok {
					return nil, errNotNode
				}
				return ts.Length(), nil
			},
		},
	},
})
var Project__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Project",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})
var Stories__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Stories",
	Fields: graphql.Fields{
		"At": &graphql.Field{
			Type: Story__type,
			Args: graphql.FieldConfigArgument{
				"key": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Stories)
				if !ok {
					return nil, errNotNode
				}

				arg := p.Args["key"]
				var out ipld.Node
				var err error
				switch ta := arg.(type) {
				case ipld.Node:
					out, err = ts.LookupByNode(ta)
				case int64:
					out, err = ts.LookupByIndex(ta)
				default:
					return nil, fmt.Errorf("unknown key type: %T", arg)
				}

				return out, err

			},
		},
		"All": &graphql.Field{
			Type: graphql.NewList(Story__type),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Stories)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)
				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Range": &graphql.Field{
			Type: graphql.NewList(Story__type),
			Args: graphql.FieldConfigArgument{
				"skip": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"take": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Stories)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)

				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Count": &graphql.Field{
			Type: graphql.NewNonNull(graphql.Int),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Stories)
				if !ok {
					return nil, errNotNode
				}
				return ts.Length(), nil
			},
		},
	},
})

func Story__Owner__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Story)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Story")
	}

	return ts.FieldOwner(), nil

}
func Story__Date__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Story)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Story")
	}

	return ts.FieldDate().AsFloat()

}
func Story__Image__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Story)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Story")
	}

	return ts.FieldImage(), nil

}
func Story__GeoPosition__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Story)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Story")
	}

	return ts.FieldGeoPosition(), nil

}
func Story__Recordings__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Story)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Story")
	}

	return ts.FieldRecordings(), nil

}
func Story__Tags__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Story)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Story")
	}

	return ts.FieldTags(), nil

}
func Story__IsPublic__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Story)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Story")
	}

	return ts.FieldIsPublic().AsBool()

}
func Story__Retention__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Story)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Story")
	}

	return ts.FieldRetention().AsFloat()

}

var Story__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Story",
	Fields: graphql.Fields{
		"Owner": &graphql.Field{

			Type: graphql.NewNonNull(Profile__type),

			Resolve: Story__Owner__resolve,
		},
		"Date": &graphql.Field{

			Type: graphql.NewNonNull(graphql.Int),

			Resolve: Story__Date__resolve,
		},
		"Image": &graphql.Field{

			Type: graphql.NewNonNull(Image__type),

			Resolve: Story__Image__resolve,
		},
		"GeoPosition": &graphql.Field{

			Type: graphql.NewNonNull(GeoPosition__type),

			Resolve: Story__GeoPosition__resolve,
		},
		"Recordings": &graphql.Field{

			Type: graphql.NewNonNull(Audios__type),

			Resolve: Story__Recordings__resolve,
		},
		"Tags": &graphql.Field{

			Type: graphql.NewNonNull(Tags__type),

			Resolve: Story__Tags__resolve,
		},
		"IsPublic": &graphql.Field{

			Type: graphql.NewNonNull(graphql.Boolean),

			Resolve: Story__IsPublic__resolve,
		},
		"Retention": &graphql.Field{

			Type: graphql.NewNonNull(graphql.Int),

			Resolve: Story__Retention__resolve,
		},
	},
})

func StoryCollection__Name__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.StoryCollection)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.StoryCollection")
	}

	return ts.FieldName().AsString()

}
func StoryCollection__Stories__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.StoryCollection)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.StoryCollection")
	}

	return ts.FieldStories(), nil

}
func StoryCollection__StartLocation__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.StoryCollection)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.StoryCollection")
	}

	return ts.FieldStartLocation(), nil

}

var StoryCollection__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "StoryCollection",
	Fields: graphql.Fields{
		"Name": &graphql.Field{

			Type: graphql.NewNonNull(graphql.String),

			Resolve: StoryCollection__Name__resolve,
		},
		"Stories": &graphql.Field{

			Type: graphql.NewNonNull(Stories__type),

			Resolve: StoryCollection__Stories__resolve,
		},
		"StartLocation": &graphql.Field{

			Type: graphql.NewNonNull(Location__type),

			Resolve: StoryCollection__StartLocation__resolve,
		},
	},
})

func Tag__Name__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Tag)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Tag")
	}

	return ts.FieldName().AsString()

}

var Tag__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Tag",
	Fields: graphql.Fields{
		"Name": &graphql.Field{

			Type: graphql.NewNonNull(graphql.String),

			Resolve: Tag__Name__resolve,
		},
	},
})
var Tags__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Tags",
	Fields: graphql.Fields{
		"At": &graphql.Field{
			Type: Tag__type,
			Args: graphql.FieldConfigArgument{
				"key": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Tags)
				if !ok {
					return nil, errNotNode
				}

				arg := p.Args["key"]
				var out ipld.Node
				var err error
				switch ta := arg.(type) {
				case ipld.Node:
					out, err = ts.LookupByNode(ta)
				case int64:
					out, err = ts.LookupByIndex(ta)
				default:
					return nil, fmt.Errorf("unknown key type: %T", arg)
				}

				return out, err

			},
		},
		"All": &graphql.Field{
			Type: graphql.NewList(Tag__type),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Tags)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)
				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Range": &graphql.Field{
			Type: graphql.NewList(Tag__type),
			Args: graphql.FieldConfigArgument{
				"skip": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"take": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Tags)
				if !ok {
					return nil, errNotNode
				}
				it := ts.ListIterator()
				children := make([]ipld.Node, 0)

				for !it.Done() {
					_, node, err := it.Next()
					if err != nil {
						return nil, err
					}

					children = append(children, node)
				}
				return children, nil
			},
		},
		"Count": &graphql.Field{
			Type: graphql.NewNonNull(graphql.Int),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				ts, ok := p.Source.(schema.Tags)
				if !ok {
					return nil, errNotNode
				}
				return ts.Length(), nil
			},
		},
	},
})
var Task__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Task",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})

func Template__Group__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Template)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Template")
	}

	return ts.FieldGroup(), nil

}
func Template__DAO__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Template)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Template")
	}

	return ts.FieldDAO(), nil

}
func Template__Company__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Template)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Template")
	}

	return ts.FieldCompany(), nil

}
func Template__Project__resolve(p graphql.ResolveParams) (interface{}, error) {
	ts, ok := p.Source.(schema.Template)
	if !ok {
		return nil, fmt.Errorf(errUnexpectedType, p.Source, "schema.Template")
	}

	return ts.FieldProject(), nil

}

var Template__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "Template",
	Fields: graphql.Fields{
		"Group": &graphql.Field{

			Type: graphql.NewNonNull(Group__type),

			Resolve: Template__Group__resolve,
		},
		"DAO": &graphql.Field{

			Type: graphql.NewNonNull(DAO__type),

			Resolve: Template__DAO__resolve,
		},
		"Company": &graphql.Field{

			Type: graphql.NewNonNull(Company__type),

			Resolve: Template__Company__resolve,
		},
		"Project": &graphql.Field{

			Type: graphql.NewNonNull(Project__type),

			Resolve: Template__Project__resolve,
		},
	},
})
var World__type = graphql.NewObject(graphql.ObjectConfig{
	Name: "World",
	Fields: graphql.Fields{
		"__Exists": &graphql.Field{
			Type: graphql.Boolean,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return true, nil
			},
		},
	},
})

func init() {

}

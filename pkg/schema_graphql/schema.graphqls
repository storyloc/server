type Query {
	profile(id: ID!): Profile
	story(id: ID!): Story
	stories: [Story]
}

type Mutation {
	createProfile(input: ProfileInput!): Profile
	createTag(input: TagInput!): Tag
	createStory(input: StoryInput!): Story
	deleteStory(id ID!)
	createStoryPoint(input: StoryPointInput!): StoryPoint
	deleteStoryPoint(id ID!)
	createRecording(input: RecordingInput!): Recording
	deleteRecording(id: ID!)
	updateTags(input: UpdateStoryPointTagsInput!)
}

type Profile {
	id: ID!
	name: String!
	stories: [Story]
}
input ProfileInput {
	name: String!
}

type Tag {
	id: ID!
	name: String!
}
input TagInput {
	name: String!
}

type Story {
	id: ID!
	name: String!
	owner: Profile!
	collection: [StoryPoint]
}
input StoryInput {
	name: String!
	ownerId: ID!
}

type LocationÂ {
	latitude: Double!
	longitude: Double!
}

type StoryPoint {
	id: ID!
	owner: Profile!
	image: String!
	recordings: [Recording]
	location: Location!
}
input StoryPointInput {
	name: String!
	ownerId: ID!
	image: Data!
	location: Location!
}

type Recording {
	id: ID!
	storyPointId: ID!
	title: String!
	data: Data!
}
input RecordingInput {
	title: String!
	storyPointId: ID!
	data: Data!
}

input UpdateStoryPointTagsInput {
	storyPointId: ID!
	tags: [Tag]
}
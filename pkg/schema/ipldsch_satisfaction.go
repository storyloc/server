package schema

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	"github.com/ipld/go-ipld-prime/datamodel"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

func (n Bytes) Bytes() []byte {
	return n.x
}
func (_Bytes__Prototype) FromBytes(v []byte) (Bytes, error) {
	n := _Bytes{v}
	return &n, nil
}

type _Bytes__Maybe struct {
	m schema.Maybe
	v _Bytes
}
type MaybeBytes = *_Bytes__Maybe

func (m MaybeBytes) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBytes) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBytes) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBytes) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBytes) Must() Bytes {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Bytes)(&_Bytes{})
var _ schema.TypedNode = (Bytes)(&_Bytes{})

func (Bytes) Kind() datamodel.Kind {
	return datamodel.Kind_Bytes
}
func (Bytes) LookupByString(string) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.LookupByString("")
}
func (Bytes) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.LookupByNode(nil)
}
func (Bytes) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.LookupByIndex(0)
}
func (Bytes) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.LookupBySegment(seg)
}
func (Bytes) MapIterator() datamodel.MapIterator {
	return nil
}
func (Bytes) ListIterator() datamodel.ListIterator {
	return nil
}
func (Bytes) Length() int64 {
	return -1
}
func (Bytes) IsAbsent() bool {
	return false
}
func (Bytes) IsNull() bool {
	return false
}
func (Bytes) AsBool() (bool, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.AsBool()
}
func (Bytes) AsInt() (int64, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.AsInt()
}
func (Bytes) AsFloat() (float64, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.AsFloat()
}
func (Bytes) AsString() (string, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.AsString()
}
func (n Bytes) AsBytes() ([]byte, error) {
	return n.x, nil
}
func (Bytes) AsLink() (datamodel.Link, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.AsLink()
}
func (Bytes) Prototype() datamodel.NodePrototype {
	return _Bytes__Prototype{}
}

type _Bytes__Prototype struct{}

func (_Bytes__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Bytes__Builder
	nb.Reset()
	return &nb
}

type _Bytes__Builder struct {
	_Bytes__Assembler
}

func (nb *_Bytes__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bytes__Builder) Reset() {
	var w _Bytes
	var m schema.Maybe
	*nb = _Bytes__Builder{_Bytes__Assembler{w: &w, m: &m}}
}

type _Bytes__Assembler struct {
	w *_Bytes
	m *schema.Maybe
}

func (na *_Bytes__Assembler) reset() {}
func (_Bytes__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.BeginMap(0)
}
func (_Bytes__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.BeginList(0)
}
func (na *_Bytes__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Bytes__Assembler) AssignBool(bool) error {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignBool(false)
}
func (_Bytes__Assembler) AssignInt(int64) error {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignInt(0)
}
func (_Bytes__Assembler) AssignFloat(float64) error {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignFloat(0)
}
func (_Bytes__Assembler) AssignString(string) error {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignString("")
}
func (na *_Bytes__Assembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bytes__Assembler) AssignLink(datamodel.Link) error {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignLink(nil)
}
func (na *_Bytes__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBytes(); err != nil {
		return err
	} else {
		return na.AssignBytes(v2)
	}
}
func (_Bytes__Assembler) Prototype() datamodel.NodePrototype {
	return _Bytes__Prototype{}
}
func (Bytes) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bytes) Representation() datamodel.Node {
	return (*_Bytes__Repr)(n)
}

type _Bytes__Repr = _Bytes

var _ datamodel.Node = &_Bytes__Repr{}

type _Bytes__ReprPrototype = _Bytes__Prototype
type _Bytes__ReprAssembler = _Bytes__Assembler

func (n *_Communites) Lookup(idx int64) Community {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_Communites) LookupMaybe(idx int64) MaybeCommunity {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Community__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _Communites__valueAbsent = _Community__Maybe{m: schema.Maybe_Absent}

func (n Communites) Iterator() *Communites__Itr {
	return &Communites__Itr{n, 0}
}

type Communites__Itr struct {
	n   Communites
	idx int
}

func (itr *Communites__Itr) Next() (idx int64, v Community) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *Communites__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _Communites__Maybe struct {
	m schema.Maybe
	v _Communites
}
type MaybeCommunites = *_Communites__Maybe

func (m MaybeCommunites) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeCommunites) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeCommunites) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeCommunites) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeCommunites) Must() Communites {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Communites)(&_Communites{})
var _ schema.TypedNode = (Communites)(&_Communites{})

func (Communites) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (Communites) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "schema.Communites"}.LookupByString("")
}
func (n Communites) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n Communites) LookupByIndex(idx int64) (datamodel.Node, error) {
	if n.Length() <= idx {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n Communites) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "schema.Communites", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (Communites) MapIterator() datamodel.MapIterator {
	return nil
}
func (n Communites) ListIterator() datamodel.ListIterator {
	return &_Communites__ListItr{n, 0}
}

type _Communites__ListItr struct {
	n   Communites
	idx int
}

func (itr *_Communites__ListItr) Next() (idx int64, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, datamodel.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_Communites__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n Communites) Length() int64 {
	return int64(len(n.x))
}
func (Communites) IsAbsent() bool {
	return false
}
func (Communites) IsNull() bool {
	return false
}
func (Communites) AsBool() (bool, error) {
	return mixins.List{TypeName: "schema.Communites"}.AsBool()
}
func (Communites) AsInt() (int64, error) {
	return mixins.List{TypeName: "schema.Communites"}.AsInt()
}
func (Communites) AsFloat() (float64, error) {
	return mixins.List{TypeName: "schema.Communites"}.AsFloat()
}
func (Communites) AsString() (string, error) {
	return mixins.List{TypeName: "schema.Communites"}.AsString()
}
func (Communites) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "schema.Communites"}.AsBytes()
}
func (Communites) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "schema.Communites"}.AsLink()
}
func (Communites) Prototype() datamodel.NodePrototype {
	return _Communites__Prototype{}
}

type _Communites__Prototype struct{}

func (_Communites__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Communites__Builder
	nb.Reset()
	return &nb
}

type _Communites__Builder struct {
	_Communites__Assembler
}

func (nb *_Communites__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Communites__Builder) Reset() {
	var w _Communites
	var m schema.Maybe
	*nb = _Communites__Builder{_Communites__Assembler{w: &w, m: &m}}
}

type _Communites__Assembler struct {
	w     *_Communites
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Community__Assembler
}

func (na *_Communites__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Communites__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "schema.Communites"}.BeginMap(0)
}
func (na *_Communites__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Community, 0, sizeHint)
	}
	return na, nil
}
func (na *_Communites__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "schema.Communites"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Communites__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "schema.Communites"}.AssignBool(false)
}
func (_Communites__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "schema.Communites"}.AssignInt(0)
}
func (_Communites__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "schema.Communites"}.AssignFloat(0)
}
func (_Communites__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "schema.Communites"}.AssignString("")
}
func (_Communites__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "schema.Communites"}.AssignBytes(nil)
}
func (_Communites__Assembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "schema.Communites"}.AssignLink(nil)
}
func (na *_Communites__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Communites); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "schema.Communites", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Communites__Assembler) Prototype() datamodel.NodePrototype {
	return _Communites__Prototype{}
}
func (la *_Communites__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Communites__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Community{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Communites__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Communites__Assembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Community__Prototype{}
}
func (Communites) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Communites) Representation() datamodel.Node {
	return (*_Communites__Repr)(n)
}

type _Communites__Repr _Communites

var _ datamodel.Node = &_Communites__Repr{}

func (_Communites__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (_Communites__Repr) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "schema.Communites.Repr"}.LookupByString("")
}
func (nr *_Communites__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (Communites)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Community).Representation(), nil
}
func (nr *_Communites__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	v, err := (Communites)(nr).LookupByIndex(idx)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Community).Representation(), nil
}
func (n _Communites__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "schema.Communites.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_Communites__Repr) MapIterator() datamodel.MapIterator {
	return nil
}
func (nr *_Communites__Repr) ListIterator() datamodel.ListIterator {
	return &_Communites__ReprListItr{(Communites)(nr), 0}
}

type _Communites__ReprListItr _Communites__ListItr

func (itr *_Communites__ReprListItr) Next() (idx int64, v datamodel.Node, err error) {
	idx, v, err = (*_Communites__ListItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return idx, v.(Community).Representation(), nil
}
func (itr *_Communites__ReprListItr) Done() bool {
	return (*_Communites__ListItr)(itr).Done()
}

func (rn *_Communites__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_Communites__Repr) IsAbsent() bool {
	return false
}
func (_Communites__Repr) IsNull() bool {
	return false
}
func (_Communites__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "schema.Communites.Repr"}.AsBool()
}
func (_Communites__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "schema.Communites.Repr"}.AsInt()
}
func (_Communites__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "schema.Communites.Repr"}.AsFloat()
}
func (_Communites__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "schema.Communites.Repr"}.AsString()
}
func (_Communites__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "schema.Communites.Repr"}.AsBytes()
}
func (_Communites__Repr) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "schema.Communites.Repr"}.AsLink()
}
func (_Communites__Repr) Prototype() datamodel.NodePrototype {
	return _Communites__ReprPrototype{}
}

type _Communites__ReprPrototype struct{}

func (_Communites__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Communites__ReprBuilder
	nb.Reset()
	return &nb
}

type _Communites__ReprBuilder struct {
	_Communites__ReprAssembler
}

func (nb *_Communites__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Communites__ReprBuilder) Reset() {
	var w _Communites
	var m schema.Maybe
	*nb = _Communites__ReprBuilder{_Communites__ReprAssembler{w: &w, m: &m}}
}

type _Communites__ReprAssembler struct {
	w     *_Communites
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Community__ReprAssembler
}

func (na *_Communites__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Communites__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "schema.Communites.Repr"}.BeginMap(0)
}
func (na *_Communites__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Community, 0, sizeHint)
	}
	return na, nil
}
func (na *_Communites__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "schema.Communites.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Communites__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "schema.Communites.Repr"}.AssignBool(false)
}
func (_Communites__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "schema.Communites.Repr"}.AssignInt(0)
}
func (_Communites__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "schema.Communites.Repr"}.AssignFloat(0)
}
func (_Communites__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "schema.Communites.Repr"}.AssignString("")
}
func (_Communites__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "schema.Communites.Repr"}.AssignBytes(nil)
}
func (_Communites__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "schema.Communites.Repr"}.AssignLink(nil)
}
func (na *_Communites__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Communites); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "schema.Communites.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Communites__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Communites__ReprPrototype{}
}
func (la *_Communites__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Communites__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Community{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Communites__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Communites__ReprAssembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Community__ReprPrototype{}
}

func (n _Community) FieldName() String {
	return &n.Name
}
func (n _Community) FieldImage() MaybeImage {
	return &n.Image
}

type _Community__Maybe struct {
	m schema.Maybe
	v Community
}
type MaybeCommunity = *_Community__Maybe

func (m MaybeCommunity) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeCommunity) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeCommunity) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeCommunity) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeCommunity) Must() Community {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__Community_Name  = _String{"Name"}
	fieldName__Community_Image = _String{"Image"}
)
var _ datamodel.Node = (Community)(&_Community{})
var _ schema.TypedNode = (Community)(&_Community{})

func (Community) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Community) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Name":
		return &n.Name, nil
	case "Image":
		if n.Image.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return n.Image.v, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n Community) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Community) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.Community"}.LookupByIndex(0)
}
func (n Community) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Community) MapIterator() datamodel.MapIterator {
	return &_Community__MapItr{n, 0}
}

type _Community__MapItr struct {
	n   Community
	idx int
}

func (itr *_Community__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Community_Name
		v = &itr.n.Name
	case 1:
		k = &fieldName__Community_Image
		if itr.n.Image.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = itr.n.Image.v
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Community__MapItr) Done() bool {
	return itr.idx >= 2
}

func (Community) ListIterator() datamodel.ListIterator {
	return nil
}
func (Community) Length() int64 {
	return 2
}
func (Community) IsAbsent() bool {
	return false
}
func (Community) IsNull() bool {
	return false
}
func (Community) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.Community"}.AsBool()
}
func (Community) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.Community"}.AsInt()
}
func (Community) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.Community"}.AsFloat()
}
func (Community) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.Community"}.AsString()
}
func (Community) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.Community"}.AsBytes()
}
func (Community) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.Community"}.AsLink()
}
func (Community) Prototype() datamodel.NodePrototype {
	return _Community__Prototype{}
}

type _Community__Prototype struct{}

func (_Community__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Community__Builder
	nb.Reset()
	return &nb
}

type _Community__Builder struct {
	_Community__Assembler
}

func (nb *_Community__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Community__Builder) Reset() {
	var w _Community
	var m schema.Maybe
	*nb = _Community__Builder{_Community__Assembler{w: &w, m: &m}}
}

type _Community__Assembler struct {
	w     *_Community
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm       schema.Maybe
	ca_Name  _String__Assembler
	ca_Image _Image__Assembler
}

func (na *_Community__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Name.reset()
	na.ca_Image.reset()
}

var (
	fieldBit__Community_Name        = 1 << 0
	fieldBit__Community_Image       = 1 << 1
	fieldBits__Community_sufficient = 0 + 1<<0
)

func (na *_Community__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Community{}
	}
	return na, nil
}
func (_Community__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.Community"}.BeginList(0)
}
func (na *_Community__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.Community"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Community__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.Community"}.AssignBool(false)
}
func (_Community__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.Community"}.AssignInt(0)
}
func (_Community__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.Community"}.AssignFloat(0)
}
func (_Community__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.Community"}.AssignString("")
}
func (_Community__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.Community"}.AssignBytes(nil)
}
func (_Community__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.Community"}.AssignLink(nil)
}
func (na *_Community__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Community); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.Community", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Community__Assembler) Prototype() datamodel.NodePrototype {
	return _Community__Prototype{}
}
func (ma *_Community__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Name.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.Image.m {
		case schema.Maybe_Value:
			ma.w.Image.v = ma.ca_Image.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Community__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Name":
		if ma.s&fieldBit__Community_Name != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Community_Name}
		}
		ma.s += fieldBit__Community_Name
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Name.w = &ma.w.Name
		ma.ca_Name.m = &ma.cm
		return &ma.ca_Name, nil
	case "Image":
		if ma.s&fieldBit__Community_Image != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Community_Image}
		}
		ma.s += fieldBit__Community_Image
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Image.w = ma.w.Image.v
		ma.ca_Image.m = &ma.w.Image.m
		return &ma.ca_Image, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.Community", Key: &_String{k}}
}
func (ma *_Community__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Community__KeyAssembler)(ma)
}
func (ma *_Community__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Name.w = &ma.w.Name
		ma.ca_Name.m = &ma.cm
		return &ma.ca_Name
	case 1:
		ma.ca_Image.w = ma.w.Image.v
		ma.ca_Image.m = &ma.w.Image.m
		return &ma.ca_Image
	default:
		panic("unreachable")
	}
}
func (ma *_Community__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Community_sufficient != fieldBits__Community_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__Community_Name == 0 {
			err.Missing = append(err.Missing, "Name")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Community__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Community__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _Community__KeyAssembler _Community__Assembler

func (_Community__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Community.KeyAssembler"}.BeginMap(0)
}
func (_Community__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Community.KeyAssembler"}.BeginList(0)
}
func (na *_Community__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.Community.KeyAssembler"}.AssignNull()
}
func (_Community__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.Community.KeyAssembler"}.AssignBool(false)
}
func (_Community__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.Community.KeyAssembler"}.AssignInt(0)
}
func (_Community__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.Community.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Community__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Name":
		if ka.s&fieldBit__Community_Name != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Community_Name}
		}
		ka.s += fieldBit__Community_Name
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Image":
		if ka.s&fieldBit__Community_Image != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Community_Image}
		}
		ka.s += fieldBit__Community_Image
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "schema.Community", Key: &_String{k}}
	}
}
func (_Community__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.Community.KeyAssembler"}.AssignBytes(nil)
}
func (_Community__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.Community.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Community__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Community__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (Community) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Community) Representation() datamodel.Node {
	return (*_Community__Repr)(n)
}

type _Community__Repr _Community

var (
	fieldName__Community_Name_serial  = _String{"Name"}
	fieldName__Community_Image_serial = _String{"Image"}
)
var _ datamodel.Node = &_Community__Repr{}

func (_Community__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_Community__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Name":
		return n.Name.Representation(), nil
	case "Image":
		if n.Image.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.Image.v.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_Community__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Community__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.Community.Repr"}.LookupByIndex(0)
}
func (n _Community__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Community__Repr) MapIterator() datamodel.MapIterator {
	end := 2
	if n.Image.m == schema.Maybe_Absent {
		end = 1
	} else {
		goto done
	}
done:
	return &_Community__ReprMapItr{n, 0, end}
}

type _Community__ReprMapItr struct {
	n   *_Community__Repr
	idx int
	end int
}

func (itr *_Community__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
advance:
	if itr.idx >= 2 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Community_Name_serial
		v = itr.n.Name.Representation()
	case 1:
		k = &fieldName__Community_Image_serial
		if itr.n.Image.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.Image.v.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Community__ReprMapItr) Done() bool {
	return itr.idx >= itr.end
}
func (_Community__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_Community__Repr) Length() int64 {
	l := 2
	if rn.Image.m == schema.Maybe_Absent {
		l--
	}
	return int64(l)
}
func (_Community__Repr) IsAbsent() bool {
	return false
}
func (_Community__Repr) IsNull() bool {
	return false
}
func (_Community__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.Community.Repr"}.AsBool()
}
func (_Community__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.Community.Repr"}.AsInt()
}
func (_Community__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.Community.Repr"}.AsFloat()
}
func (_Community__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.Community.Repr"}.AsString()
}
func (_Community__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.Community.Repr"}.AsBytes()
}
func (_Community__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.Community.Repr"}.AsLink()
}
func (_Community__Repr) Prototype() datamodel.NodePrototype {
	return _Community__ReprPrototype{}
}

type _Community__ReprPrototype struct{}

func (_Community__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Community__ReprBuilder
	nb.Reset()
	return &nb
}

type _Community__ReprBuilder struct {
	_Community__ReprAssembler
}

func (nb *_Community__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Community__ReprBuilder) Reset() {
	var w _Community
	var m schema.Maybe
	*nb = _Community__ReprBuilder{_Community__ReprAssembler{w: &w, m: &m}}
}

type _Community__ReprAssembler struct {
	w     *_Community
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm       schema.Maybe
	ca_Name  _String__ReprAssembler
	ca_Image _Image__ReprAssembler
}

func (na *_Community__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Name.reset()
	na.ca_Image.reset()
}
func (na *_Community__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Community{}
	}
	return na, nil
}
func (_Community__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.Community.Repr"}.BeginList(0)
}
func (na *_Community__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.Community.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Community__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.Community.Repr"}.AssignBool(false)
}
func (_Community__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.Community.Repr"}.AssignInt(0)
}
func (_Community__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.Community.Repr"}.AssignFloat(0)
}
func (_Community__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.Community.Repr"}.AssignString("")
}
func (_Community__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.Community.Repr"}.AssignBytes(nil)
}
func (_Community__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.Community.Repr"}.AssignLink(nil)
}
func (na *_Community__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Community); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.Community.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Community__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Community__ReprPrototype{}
}
func (ma *_Community__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.Image.m {
		case schema.Maybe_Value:
			ma.w.Image.v = ma.ca_Image.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Community__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Name":
		if ma.s&fieldBit__Community_Name != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Community_Name_serial}
		}
		ma.s += fieldBit__Community_Name
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Name.w = &ma.w.Name
		ma.ca_Name.m = &ma.cm
		return &ma.ca_Name, nil
	case "Image":
		if ma.s&fieldBit__Community_Image != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Community_Image_serial}
		}
		ma.s += fieldBit__Community_Image
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Image.w = ma.w.Image.v
		ma.ca_Image.m = &ma.w.Image.m

		return &ma.ca_Image, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.Community.Repr", Key: &_String{k}}
}
func (ma *_Community__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Community__ReprKeyAssembler)(ma)
}
func (ma *_Community__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Name.w = &ma.w.Name
		ma.ca_Name.m = &ma.cm
		return &ma.ca_Name
	case 1:
		ma.ca_Image.w = ma.w.Image.v
		ma.ca_Image.m = &ma.w.Image.m

		return &ma.ca_Image
	default:
		panic("unreachable")
	}
}
func (ma *_Community__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Community_sufficient != fieldBits__Community_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__Community_Name == 0 {
			err.Missing = append(err.Missing, "Name")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Community__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Community__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _Community__ReprKeyAssembler _Community__ReprAssembler

func (_Community__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Community.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Community__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Community.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Community__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.Community.Repr.KeyAssembler"}.AssignNull()
}
func (_Community__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.Community.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Community__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.Community.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Community__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.Community.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Community__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Name":
		if ka.s&fieldBit__Community_Name != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Community_Name_serial}
		}
		ka.s += fieldBit__Community_Name
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Image":
		if ka.s&fieldBit__Community_Image != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Community_Image_serial}
		}
		ka.s += fieldBit__Community_Image
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "schema.Community.Repr", Key: &_String{k}}
}
func (_Community__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.Community.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Community__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.Community.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Community__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Community__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n _Image) FieldData() Bytes {
	return &n.Data
}
func (n _Image) FieldSize() Int {
	return &n.Size
}

type _Image__Maybe struct {
	m schema.Maybe
	v Image
}
type MaybeImage = *_Image__Maybe

func (m MaybeImage) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeImage) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeImage) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeImage) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeImage) Must() Image {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__Image_Data = _String{"Data"}
	fieldName__Image_Size = _String{"Size"}
)
var _ datamodel.Node = (Image)(&_Image{})
var _ schema.TypedNode = (Image)(&_Image{})

func (Image) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Image) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Data":
		return &n.Data, nil
	case "Size":
		return &n.Size, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n Image) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Image) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.Image"}.LookupByIndex(0)
}
func (n Image) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Image) MapIterator() datamodel.MapIterator {
	return &_Image__MapItr{n, 0}
}

type _Image__MapItr struct {
	n   Image
	idx int
}

func (itr *_Image__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Image_Data
		v = &itr.n.Data
	case 1:
		k = &fieldName__Image_Size
		v = &itr.n.Size
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Image__MapItr) Done() bool {
	return itr.idx >= 2
}

func (Image) ListIterator() datamodel.ListIterator {
	return nil
}
func (Image) Length() int64 {
	return 2
}
func (Image) IsAbsent() bool {
	return false
}
func (Image) IsNull() bool {
	return false
}
func (Image) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.Image"}.AsBool()
}
func (Image) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.Image"}.AsInt()
}
func (Image) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.Image"}.AsFloat()
}
func (Image) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.Image"}.AsString()
}
func (Image) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.Image"}.AsBytes()
}
func (Image) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.Image"}.AsLink()
}
func (Image) Prototype() datamodel.NodePrototype {
	return _Image__Prototype{}
}

type _Image__Prototype struct{}

func (_Image__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Image__Builder
	nb.Reset()
	return &nb
}

type _Image__Builder struct {
	_Image__Assembler
}

func (nb *_Image__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Image__Builder) Reset() {
	var w _Image
	var m schema.Maybe
	*nb = _Image__Builder{_Image__Assembler{w: &w, m: &m}}
}

type _Image__Assembler struct {
	w     *_Image
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm      schema.Maybe
	ca_Data _Bytes__Assembler
	ca_Size _Int__Assembler
}

func (na *_Image__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Data.reset()
	na.ca_Size.reset()
}

var (
	fieldBit__Image_Data        = 1 << 0
	fieldBit__Image_Size        = 1 << 1
	fieldBits__Image_sufficient = 0 + 1<<0 + 1<<1
)

func (na *_Image__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Image{}
	}
	return na, nil
}
func (_Image__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.Image"}.BeginList(0)
}
func (na *_Image__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.Image"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Image__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.Image"}.AssignBool(false)
}
func (_Image__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.Image"}.AssignInt(0)
}
func (_Image__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.Image"}.AssignFloat(0)
}
func (_Image__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.Image"}.AssignString("")
}
func (_Image__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.Image"}.AssignBytes(nil)
}
func (_Image__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.Image"}.AssignLink(nil)
}
func (na *_Image__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Image); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.Image", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Image__Assembler) Prototype() datamodel.NodePrototype {
	return _Image__Prototype{}
}
func (ma *_Image__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Data.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Size.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Image__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Data":
		if ma.s&fieldBit__Image_Data != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Image_Data}
		}
		ma.s += fieldBit__Image_Data
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Data.w = &ma.w.Data
		ma.ca_Data.m = &ma.cm
		return &ma.ca_Data, nil
	case "Size":
		if ma.s&fieldBit__Image_Size != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Image_Size}
		}
		ma.s += fieldBit__Image_Size
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Size.w = &ma.w.Size
		ma.ca_Size.m = &ma.cm
		return &ma.ca_Size, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.Image", Key: &_String{k}}
}
func (ma *_Image__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Image__KeyAssembler)(ma)
}
func (ma *_Image__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Data.w = &ma.w.Data
		ma.ca_Data.m = &ma.cm
		return &ma.ca_Data
	case 1:
		ma.ca_Size.w = &ma.w.Size
		ma.ca_Size.m = &ma.cm
		return &ma.ca_Size
	default:
		panic("unreachable")
	}
}
func (ma *_Image__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Image_sufficient != fieldBits__Image_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__Image_Data == 0 {
			err.Missing = append(err.Missing, "Data")
		}
		if ma.s&fieldBit__Image_Size == 0 {
			err.Missing = append(err.Missing, "Size")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Image__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Image__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _Image__KeyAssembler _Image__Assembler

func (_Image__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Image.KeyAssembler"}.BeginMap(0)
}
func (_Image__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Image.KeyAssembler"}.BeginList(0)
}
func (na *_Image__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.Image.KeyAssembler"}.AssignNull()
}
func (_Image__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.Image.KeyAssembler"}.AssignBool(false)
}
func (_Image__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.Image.KeyAssembler"}.AssignInt(0)
}
func (_Image__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.Image.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Image__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Data":
		if ka.s&fieldBit__Image_Data != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Image_Data}
		}
		ka.s += fieldBit__Image_Data
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Size":
		if ka.s&fieldBit__Image_Size != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Image_Size}
		}
		ka.s += fieldBit__Image_Size
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "schema.Image", Key: &_String{k}}
	}
}
func (_Image__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.Image.KeyAssembler"}.AssignBytes(nil)
}
func (_Image__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.Image.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Image__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Image__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (Image) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Image) Representation() datamodel.Node {
	return (*_Image__Repr)(n)
}

type _Image__Repr _Image

var (
	fieldName__Image_Data_serial = _String{"Data"}
	fieldName__Image_Size_serial = _String{"Size"}
)
var _ datamodel.Node = &_Image__Repr{}

func (_Image__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_Image__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Data":
		return n.Data.Representation(), nil
	case "Size":
		return n.Size.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_Image__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Image__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.Image.Repr"}.LookupByIndex(0)
}
func (n _Image__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Image__Repr) MapIterator() datamodel.MapIterator {
	return &_Image__ReprMapItr{n, 0}
}

type _Image__ReprMapItr struct {
	n   *_Image__Repr
	idx int
}

func (itr *_Image__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Image_Data_serial
		v = itr.n.Data.Representation()
	case 1:
		k = &fieldName__Image_Size_serial
		v = itr.n.Size.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Image__ReprMapItr) Done() bool {
	return itr.idx >= 2
}
func (_Image__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_Image__Repr) Length() int64 {
	l := 2
	return int64(l)
}
func (_Image__Repr) IsAbsent() bool {
	return false
}
func (_Image__Repr) IsNull() bool {
	return false
}
func (_Image__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.Image.Repr"}.AsBool()
}
func (_Image__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.Image.Repr"}.AsInt()
}
func (_Image__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.Image.Repr"}.AsFloat()
}
func (_Image__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.Image.Repr"}.AsString()
}
func (_Image__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.Image.Repr"}.AsBytes()
}
func (_Image__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.Image.Repr"}.AsLink()
}
func (_Image__Repr) Prototype() datamodel.NodePrototype {
	return _Image__ReprPrototype{}
}

type _Image__ReprPrototype struct{}

func (_Image__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Image__ReprBuilder
	nb.Reset()
	return &nb
}

type _Image__ReprBuilder struct {
	_Image__ReprAssembler
}

func (nb *_Image__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Image__ReprBuilder) Reset() {
	var w _Image
	var m schema.Maybe
	*nb = _Image__ReprBuilder{_Image__ReprAssembler{w: &w, m: &m}}
}

type _Image__ReprAssembler struct {
	w     *_Image
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm      schema.Maybe
	ca_Data _Bytes__ReprAssembler
	ca_Size _Int__ReprAssembler
}

func (na *_Image__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Data.reset()
	na.ca_Size.reset()
}
func (na *_Image__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Image{}
	}
	return na, nil
}
func (_Image__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.Image.Repr"}.BeginList(0)
}
func (na *_Image__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.Image.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Image__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.Image.Repr"}.AssignBool(false)
}
func (_Image__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.Image.Repr"}.AssignInt(0)
}
func (_Image__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.Image.Repr"}.AssignFloat(0)
}
func (_Image__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.Image.Repr"}.AssignString("")
}
func (_Image__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.Image.Repr"}.AssignBytes(nil)
}
func (_Image__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.Image.Repr"}.AssignLink(nil)
}
func (na *_Image__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Image); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.Image.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Image__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Image__ReprPrototype{}
}
func (ma *_Image__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Image__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Data":
		if ma.s&fieldBit__Image_Data != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Image_Data_serial}
		}
		ma.s += fieldBit__Image_Data
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Data.w = &ma.w.Data
		ma.ca_Data.m = &ma.cm
		return &ma.ca_Data, nil
	case "Size":
		if ma.s&fieldBit__Image_Size != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Image_Size_serial}
		}
		ma.s += fieldBit__Image_Size
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Size.w = &ma.w.Size
		ma.ca_Size.m = &ma.cm
		return &ma.ca_Size, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.Image.Repr", Key: &_String{k}}
}
func (ma *_Image__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Image__ReprKeyAssembler)(ma)
}
func (ma *_Image__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Data.w = &ma.w.Data
		ma.ca_Data.m = &ma.cm
		return &ma.ca_Data
	case 1:
		ma.ca_Size.w = &ma.w.Size
		ma.ca_Size.m = &ma.cm
		return &ma.ca_Size
	default:
		panic("unreachable")
	}
}
func (ma *_Image__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Image_sufficient != fieldBits__Image_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__Image_Data == 0 {
			err.Missing = append(err.Missing, "Data")
		}
		if ma.s&fieldBit__Image_Size == 0 {
			err.Missing = append(err.Missing, "Size")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Image__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Image__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _Image__ReprKeyAssembler _Image__ReprAssembler

func (_Image__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Image.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Image__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Image.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Image__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.Image.Repr.KeyAssembler"}.AssignNull()
}
func (_Image__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.Image.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Image__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.Image.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Image__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.Image.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Image__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Data":
		if ka.s&fieldBit__Image_Data != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Image_Data_serial}
		}
		ka.s += fieldBit__Image_Data
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Size":
		if ka.s&fieldBit__Image_Size != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Image_Size_serial}
		}
		ka.s += fieldBit__Image_Size
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "schema.Image.Repr", Key: &_String{k}}
}
func (_Image__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.Image.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Image__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.Image.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Image__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Image__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n Int) Int() int64 {
	return n.x
}
func (_Int__Prototype) FromInt(v int64) (Int, error) {
	n := _Int{v}
	return &n, nil
}

type _Int__Maybe struct {
	m schema.Maybe
	v _Int
}
type MaybeInt = *_Int__Maybe

func (m MaybeInt) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeInt) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeInt) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeInt) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeInt) Must() Int {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Int)(&_Int{})
var _ schema.TypedNode = (Int)(&_Int{})

func (Int) Kind() datamodel.Kind {
	return datamodel.Kind_Int
}
func (Int) LookupByString(string) (datamodel.Node, error) {
	return mixins.Int{TypeName: "schema.Int"}.LookupByString("")
}
func (Int) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Int{TypeName: "schema.Int"}.LookupByNode(nil)
}
func (Int) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Int{TypeName: "schema.Int"}.LookupByIndex(0)
}
func (Int) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Int{TypeName: "schema.Int"}.LookupBySegment(seg)
}
func (Int) MapIterator() datamodel.MapIterator {
	return nil
}
func (Int) ListIterator() datamodel.ListIterator {
	return nil
}
func (Int) Length() int64 {
	return -1
}
func (Int) IsAbsent() bool {
	return false
}
func (Int) IsNull() bool {
	return false
}
func (Int) AsBool() (bool, error) {
	return mixins.Int{TypeName: "schema.Int"}.AsBool()
}
func (n Int) AsInt() (int64, error) {
	return n.x, nil
}
func (Int) AsFloat() (float64, error) {
	return mixins.Int{TypeName: "schema.Int"}.AsFloat()
}
func (Int) AsString() (string, error) {
	return mixins.Int{TypeName: "schema.Int"}.AsString()
}
func (Int) AsBytes() ([]byte, error) {
	return mixins.Int{TypeName: "schema.Int"}.AsBytes()
}
func (Int) AsLink() (datamodel.Link, error) {
	return mixins.Int{TypeName: "schema.Int"}.AsLink()
}
func (Int) Prototype() datamodel.NodePrototype {
	return _Int__Prototype{}
}

type _Int__Prototype struct{}

func (_Int__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Int__Builder
	nb.Reset()
	return &nb
}

type _Int__Builder struct {
	_Int__Assembler
}

func (nb *_Int__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Int__Builder) Reset() {
	var w _Int
	var m schema.Maybe
	*nb = _Int__Builder{_Int__Assembler{w: &w, m: &m}}
}

type _Int__Assembler struct {
	w *_Int
	m *schema.Maybe
}

func (na *_Int__Assembler) reset() {}
func (_Int__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.IntAssembler{TypeName: "schema.Int"}.BeginMap(0)
}
func (_Int__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.IntAssembler{TypeName: "schema.Int"}.BeginList(0)
}
func (na *_Int__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.IntAssembler{TypeName: "schema.Int"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Int__Assembler) AssignBool(bool) error {
	return mixins.IntAssembler{TypeName: "schema.Int"}.AssignBool(false)
}
func (na *_Int__Assembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Int__Assembler) AssignFloat(float64) error {
	return mixins.IntAssembler{TypeName: "schema.Int"}.AssignFloat(0)
}
func (_Int__Assembler) AssignString(string) error {
	return mixins.IntAssembler{TypeName: "schema.Int"}.AssignString("")
}
func (_Int__Assembler) AssignBytes([]byte) error {
	return mixins.IntAssembler{TypeName: "schema.Int"}.AssignBytes(nil)
}
func (_Int__Assembler) AssignLink(datamodel.Link) error {
	return mixins.IntAssembler{TypeName: "schema.Int"}.AssignLink(nil)
}
func (na *_Int__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Int); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsInt(); err != nil {
		return err
	} else {
		return na.AssignInt(v2)
	}
}
func (_Int__Assembler) Prototype() datamodel.NodePrototype {
	return _Int__Prototype{}
}
func (Int) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Int) Representation() datamodel.Node {
	return (*_Int__Repr)(n)
}

type _Int__Repr = _Int

var _ datamodel.Node = &_Int__Repr{}

type _Int__ReprPrototype = _Int__Prototype
type _Int__ReprAssembler = _Int__Assembler

func (n String) String() string {
	return n.x
}
func (_String__Prototype) fromString(w *_String, v string) error {
	*w = _String{v}
	return nil
}
func (_String__Prototype) FromString(v string) (String, error) {
	n := _String{v}
	return &n, nil
}

type _String__Maybe struct {
	m schema.Maybe
	v _String
}
type MaybeString = *_String__Maybe

func (m MaybeString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeString) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeString) Must() String {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (String)(&_String{})
var _ schema.TypedNode = (String)(&_String{})

func (String) Kind() datamodel.Kind {
	return datamodel.Kind_String
}
func (String) LookupByString(string) (datamodel.Node, error) {
	return mixins.String{TypeName: "schema.String"}.LookupByString("")
}
func (String) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.String{TypeName: "schema.String"}.LookupByNode(nil)
}
func (String) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.String{TypeName: "schema.String"}.LookupByIndex(0)
}
func (String) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.String{TypeName: "schema.String"}.LookupBySegment(seg)
}
func (String) MapIterator() datamodel.MapIterator {
	return nil
}
func (String) ListIterator() datamodel.ListIterator {
	return nil
}
func (String) Length() int64 {
	return -1
}
func (String) IsAbsent() bool {
	return false
}
func (String) IsNull() bool {
	return false
}
func (String) AsBool() (bool, error) {
	return mixins.String{TypeName: "schema.String"}.AsBool()
}
func (String) AsInt() (int64, error) {
	return mixins.String{TypeName: "schema.String"}.AsInt()
}
func (String) AsFloat() (float64, error) {
	return mixins.String{TypeName: "schema.String"}.AsFloat()
}
func (n String) AsString() (string, error) {
	return n.x, nil
}
func (String) AsBytes() ([]byte, error) {
	return mixins.String{TypeName: "schema.String"}.AsBytes()
}
func (String) AsLink() (datamodel.Link, error) {
	return mixins.String{TypeName: "schema.String"}.AsLink()
}
func (String) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

type _String__Prototype struct{}

func (_String__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _String__Builder
	nb.Reset()
	return &nb
}

type _String__Builder struct {
	_String__Assembler
}

func (nb *_String__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_String__Builder) Reset() {
	var w _String
	var m schema.Maybe
	*nb = _String__Builder{_String__Assembler{w: &w, m: &m}}
}

type _String__Assembler struct {
	w *_String
	m *schema.Maybe
}

func (na *_String__Assembler) reset() {}
func (_String__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.String"}.BeginMap(0)
}
func (_String__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.String"}.BeginList(0)
}
func (na *_String__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{TypeName: "schema.String"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_String__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.String"}.AssignBool(false)
}
func (_String__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.String"}.AssignInt(0)
}
func (_String__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.String"}.AssignFloat(0)
}
func (na *_String__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_String__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.String"}.AssignBytes(nil)
}
func (_String__Assembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.String"}.AssignLink(nil)
}
func (na *_String__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_String__Assembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (String) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n String) Representation() datamodel.Node {
	return (*_String__Repr)(n)
}

type _String__Repr = _String

var _ datamodel.Node = &_String__Repr{}

type _String__ReprPrototype = _String__Prototype
type _String__ReprAssembler = _String__Assembler

func (n _World) FieldCommunites() Communites {
	return &n.Communites
}

type _World__Maybe struct {
	m schema.Maybe
	v World
}
type MaybeWorld = *_World__Maybe

func (m MaybeWorld) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeWorld) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeWorld) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeWorld) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeWorld) Must() World {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__World_Communites = _String{"Communites"}
)
var _ datamodel.Node = (World)(&_World{})
var _ schema.TypedNode = (World)(&_World{})

func (World) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n World) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Communites":
		return &n.Communites, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n World) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (World) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.World"}.LookupByIndex(0)
}
func (n World) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n World) MapIterator() datamodel.MapIterator {
	return &_World__MapItr{n, 0}
}

type _World__MapItr struct {
	n   World
	idx int
}

func (itr *_World__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__World_Communites
		v = &itr.n.Communites
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_World__MapItr) Done() bool {
	return itr.idx >= 1
}

func (World) ListIterator() datamodel.ListIterator {
	return nil
}
func (World) Length() int64 {
	return 1
}
func (World) IsAbsent() bool {
	return false
}
func (World) IsNull() bool {
	return false
}
func (World) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.World"}.AsBool()
}
func (World) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.World"}.AsInt()
}
func (World) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.World"}.AsFloat()
}
func (World) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.World"}.AsString()
}
func (World) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.World"}.AsBytes()
}
func (World) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.World"}.AsLink()
}
func (World) Prototype() datamodel.NodePrototype {
	return _World__Prototype{}
}

type _World__Prototype struct{}

func (_World__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _World__Builder
	nb.Reset()
	return &nb
}

type _World__Builder struct {
	_World__Assembler
}

func (nb *_World__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_World__Builder) Reset() {
	var w _World
	var m schema.Maybe
	*nb = _World__Builder{_World__Assembler{w: &w, m: &m}}
}

type _World__Assembler struct {
	w     *_World
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm            schema.Maybe
	ca_Communites _Communites__Assembler
}

func (na *_World__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Communites.reset()
}

var (
	fieldBit__World_Communites  = 1 << 0
	fieldBits__World_sufficient = 0 + 1<<0
)

func (na *_World__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_World{}
	}
	return na, nil
}
func (_World__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.World"}.BeginList(0)
}
func (na *_World__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.World"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_World__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.World"}.AssignBool(false)
}
func (_World__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.World"}.AssignInt(0)
}
func (_World__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.World"}.AssignFloat(0)
}
func (_World__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.World"}.AssignString("")
}
func (_World__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.World"}.AssignBytes(nil)
}
func (_World__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.World"}.AssignLink(nil)
}
func (na *_World__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_World); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.World", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_World__Assembler) Prototype() datamodel.NodePrototype {
	return _World__Prototype{}
}
func (ma *_World__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Communites.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_World__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Communites":
		if ma.s&fieldBit__World_Communites != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__World_Communites}
		}
		ma.s += fieldBit__World_Communites
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Communites.w = &ma.w.Communites
		ma.ca_Communites.m = &ma.cm
		return &ma.ca_Communites, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.World", Key: &_String{k}}
}
func (ma *_World__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_World__KeyAssembler)(ma)
}
func (ma *_World__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Communites.w = &ma.w.Communites
		ma.ca_Communites.m = &ma.cm
		return &ma.ca_Communites
	default:
		panic("unreachable")
	}
}
func (ma *_World__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__World_sufficient != fieldBits__World_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__World_Communites == 0 {
			err.Missing = append(err.Missing, "Communites")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_World__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_World__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _World__KeyAssembler _World__Assembler

func (_World__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.World.KeyAssembler"}.BeginMap(0)
}
func (_World__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.World.KeyAssembler"}.BeginList(0)
}
func (na *_World__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.World.KeyAssembler"}.AssignNull()
}
func (_World__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.World.KeyAssembler"}.AssignBool(false)
}
func (_World__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.World.KeyAssembler"}.AssignInt(0)
}
func (_World__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.World.KeyAssembler"}.AssignFloat(0)
}
func (ka *_World__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Communites":
		if ka.s&fieldBit__World_Communites != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__World_Communites}
		}
		ka.s += fieldBit__World_Communites
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "schema.World", Key: &_String{k}}
	}
}
func (_World__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.World.KeyAssembler"}.AssignBytes(nil)
}
func (_World__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.World.KeyAssembler"}.AssignLink(nil)
}
func (ka *_World__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_World__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (World) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n World) Representation() datamodel.Node {
	return (*_World__Repr)(n)
}

type _World__Repr _World

var (
	fieldName__World_Communites_serial = _String{"Communites"}
)
var _ datamodel.Node = &_World__Repr{}

func (_World__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_World__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Communites":
		return n.Communites.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_World__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_World__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.World.Repr"}.LookupByIndex(0)
}
func (n _World__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_World__Repr) MapIterator() datamodel.MapIterator {
	return &_World__ReprMapItr{n, 0}
}

type _World__ReprMapItr struct {
	n   *_World__Repr
	idx int
}

func (itr *_World__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__World_Communites_serial
		v = itr.n.Communites.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_World__ReprMapItr) Done() bool {
	return itr.idx >= 1
}
func (_World__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_World__Repr) Length() int64 {
	l := 1
	return int64(l)
}
func (_World__Repr) IsAbsent() bool {
	return false
}
func (_World__Repr) IsNull() bool {
	return false
}
func (_World__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.World.Repr"}.AsBool()
}
func (_World__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.World.Repr"}.AsInt()
}
func (_World__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.World.Repr"}.AsFloat()
}
func (_World__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.World.Repr"}.AsString()
}
func (_World__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.World.Repr"}.AsBytes()
}
func (_World__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.World.Repr"}.AsLink()
}
func (_World__Repr) Prototype() datamodel.NodePrototype {
	return _World__ReprPrototype{}
}

type _World__ReprPrototype struct{}

func (_World__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _World__ReprBuilder
	nb.Reset()
	return &nb
}

type _World__ReprBuilder struct {
	_World__ReprAssembler
}

func (nb *_World__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_World__ReprBuilder) Reset() {
	var w _World
	var m schema.Maybe
	*nb = _World__ReprBuilder{_World__ReprAssembler{w: &w, m: &m}}
}

type _World__ReprAssembler struct {
	w     *_World
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm            schema.Maybe
	ca_Communites _Communites__ReprAssembler
}

func (na *_World__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Communites.reset()
}
func (na *_World__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_World{}
	}
	return na, nil
}
func (_World__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.World.Repr"}.BeginList(0)
}
func (na *_World__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.World.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_World__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.World.Repr"}.AssignBool(false)
}
func (_World__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.World.Repr"}.AssignInt(0)
}
func (_World__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.World.Repr"}.AssignFloat(0)
}
func (_World__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.World.Repr"}.AssignString("")
}
func (_World__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.World.Repr"}.AssignBytes(nil)
}
func (_World__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.World.Repr"}.AssignLink(nil)
}
func (na *_World__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_World); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.World.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_World__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _World__ReprPrototype{}
}
func (ma *_World__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_World__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Communites":
		if ma.s&fieldBit__World_Communites != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__World_Communites_serial}
		}
		ma.s += fieldBit__World_Communites
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Communites.w = &ma.w.Communites
		ma.ca_Communites.m = &ma.cm
		return &ma.ca_Communites, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.World.Repr", Key: &_String{k}}
}
func (ma *_World__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_World__ReprKeyAssembler)(ma)
}
func (ma *_World__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Communites.w = &ma.w.Communites
		ma.ca_Communites.m = &ma.cm
		return &ma.ca_Communites
	default:
		panic("unreachable")
	}
}
func (ma *_World__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__World_sufficient != fieldBits__World_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__World_Communites == 0 {
			err.Missing = append(err.Missing, "Communites")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_World__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_World__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _World__ReprKeyAssembler _World__ReprAssembler

func (_World__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.World.Repr.KeyAssembler"}.BeginMap(0)
}
func (_World__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.World.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_World__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.World.Repr.KeyAssembler"}.AssignNull()
}
func (_World__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.World.Repr.KeyAssembler"}.AssignBool(false)
}
func (_World__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.World.Repr.KeyAssembler"}.AssignInt(0)
}
func (_World__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.World.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_World__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Communites":
		if ka.s&fieldBit__World_Communites != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__World_Communites_serial}
		}
		ka.s += fieldBit__World_Communites
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "schema.World.Repr", Key: &_String{k}}
}
func (_World__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.World.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_World__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.World.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_World__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_World__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
